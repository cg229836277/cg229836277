---
layout: post
title:  "算法-排序-快速排序"
date:   2020-8-2 15:00:25 +0800
categories: 喜刷刷
---

> 文章将会同步到个人微信公众号：Android部落格

## 1.1 描述
快速排序算法通过多次比较和交换来实现排序，其排序流程如下：
- (1)首先设定一个分界值，通过该分界值将数组分成左右两部分。
- (2)将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值。
- (3)然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。
- (4)重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。

## 1.2 代码

```java
public class HelloWorld {
	static int[] numbers = {5,4,3,7,2,1,8,9,6,2};
	
	public static void quickSort(){
		int size = numbers.length;
		sort(0,size - 1);
	}
	
	public static void sort(int left,int right){
		int front = left;
		int later = right;
		int standardNumber = numbers[left];
		while(front < later){
			//front large number to later,and later small number at front
			while(numbers[front] < standardNumber && front < later){
				++front;
			}
			//later small number to front, and front large number to later
			while(numbers[later] > standardNumber && front < later){
				--later;
			}
			if(numbers[front] == numbers[later] && front < later){
				++front;
			} else {
				int temp = numbers[front];
				numbers[front] = numbers[later];
				numbers[later] = temp;
			}
		}
		if(front - 1 > left){
			sort(left ,front - 1);
		}
		if(later + 1 < right){
			sort(later + 1 ,right);
		}
	}
    public static void main(String []args) {
		quickSort();
		for(int value : numbers){
			System.out.println("quick value is:" + value);
		}
    }
}
```

## 1.3 总结

*5*43721896**2**

243**7**21896*5*

243*5*218967

243*5*2**1**8967

24312**5**8967

- 1挪到了5前面，导致后面的序号小于前面的序号，此时发生了第一次递归。

- 递归范围是：24312，按照上述步骤继续排序，排序完成之后，得到12234。

- 在归的过程中，再一次调用sort(later + 1,right)发生递归，其实是比较右半部分：8967，此时继续上面的排序步骤，得到6789。

- 最终排序完成。

过程如下图所示：

![](https://ftp.bmp.ovh/imgs/2020/08/e56068b24fdee9d7.jpg)










